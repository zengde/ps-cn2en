var ERROR = 'error';var SUCCESS = 'success';var ERROR_NOT_TEXT = 'error not text';var ERROR_NO_LAYER_SELECTED = 'error no layer selected';var ERROR_LAYER_LOCKED = 'error layer locked';function hasOpenDocument() {  if (app.documents.length > 0) {    return 1;  }  else {    return 0;  }}function getAllTextLayer(target) {	target=target? target:app.activeDocument;    var layers      = target.layers,        layerLen    = layers.length;	var txtlayers='{';    for (var i = 0; i < layerLen; i++) {        var layer       = layers[i],            isLayerSet  = layer.typename == 'LayerSet',            isValid     = layer.kind == LayerKind.TEXT&&layer.visible;// &&/^\s*#\d+\s*$/.test(layer.textItem.contents);            // we're allowing spaces around the text just in case        if (!isLayerSet && !isValid) continue;        var name=layer.name,type,data;        if (isLayerSet) {			data=getAllTextLayer(layer);			type='set';        } else{			data=layer.textItem.contents;			data=data.replace(/\'/g, "\\'");			data=data.replace(/\"/g, "\\\"");			data='"'+data+'"';			type='art';		} 		txtlayers+='"'+name+'":{"type":"'+type+'","data":'+data+'},';    }	txtlayers=txtlayers.slice(0,-1);//去除最后的,号	txtlayers+='}';	return txtlayers;}function getActiveLayers() {  var activeLayer = getActiveLayer();  if (activeLayer === false) {    return JSONify(ERROR, ERROR_NO_LAYER_SELECTED);  }  else if (activeLayer.allLocked === true) {    return JSONify(ERROR, ERROR_LAYER_LOCKED);  }  else if (activeLayer.typename !== 'ArtLayer') {    return JSONify(ERROR, ERROR_NOT_TEXT);  }  else if (activeLayer.kind != LayerKind.TEXT) {    return JSONify(ERROR, ERROR_NOT_TEXT);  }  else {    activeLayer = ArtLayer(activeLayer);    var textContent = String(app.activeDocument.activeLayer.textItem.contents);    return JSONify(SUCCESS, textContent);  }}//当前图层function addTranslatedTextLayer(toLanguage,translatedString) {  var activeLayer = getActiveLayer();  if (activeLayer !== false) {    if (activeLayer.typename === 'ArtLayer' && activeLayer.kind == LayerKind.TEXT) {      var duplicatedLayer = activeLayer.duplicate();	  translatedString=String(translatedString).replace(/<br\/>/gi, "\r");      duplicatedLayer.textItem.contents = translatedString;      duplicatedLayer.name = '[' + toLanguage.toUpperCase() + '] ' + activeLayer.name;      activeLayer.visible = false;      return JSONify(SUCCESS, 'success');    }    else {      return JSONify(ERROR, ERROR_NOT_TEXT);    }  }  else {    return JSONify(ERROR, ERROR_NO_LAYER_SELECTED);  }}//根据图层名function addTranslatedTextLayerByname(name,translatedString) {  var toLanguage='cn';  var activeLayer=app.activeDocument.artLayers.getByName(name);  if (activeLayer !== false) {    var duplicatedLayer = activeLayer.duplicate();	translatedString=String(translatedString).replace(/<br\/>/gi, "\r");    duplicatedLayer.textItem.contents = translatedString;    duplicatedLayer.name = '[' + toLanguage.toUpperCase() + '] ' + activeLayer.name;    activeLayer.visible = false;    return JSONify(SUCCESS, 'success');  }  else {    return JSONify(ERROR, ERROR_NO_LAYER_SELECTED);  }}//根据图层组function addTranslatedTextLayerByset(setname,name,translatedString) {  var toLanguage='cn';  var layerSetRef=app.activeDocument.layerSets.getByName(setname);  var activeLayer=layerSetRef.artLayers.getByName(name);  if (activeLayer !== false) {    var duplicatedLayer = activeLayer.duplicate();	translatedString=String(translatedString).replace(/<br\/>/gi, "\r");    duplicatedLayer.textItem.contents = translatedString;    duplicatedLayer.name = '[' + toLanguage.toUpperCase() + '] ' + activeLayer.name;    activeLayer.visible = false;    return JSONify(SUCCESS, 'success');  }  else {    return JSONify(ERROR, ERROR_NO_LAYER_SELECTED);  }}function getActiveLayer() {  if (app.documents.length > 0 &&     (app.activeDocument.activeLayer !== null ||        app.activeDocument.activeLayer !== undefined)) {    return app.activeDocument.activeLayer;  }  else {    return false;  }}function JSONify(type, message) {	message=message.replace(/\'/g, "\\'");	message=message.replace(/\"/g, "\\\"");	return '{"' + type + '":"' + message + '"}';}